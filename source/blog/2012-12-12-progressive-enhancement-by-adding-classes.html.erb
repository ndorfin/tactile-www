---
title: Progressive enhancement by adding classes
tags: javascript, best-practices
---

<p>Progressive enhancement is a Front-end Development practice that ensures your clients can still operate a webpage without (for instance) JavaScript support.<br>JS-driven widgets typically have styling applied, so it’s important to only add those styles if JavaScript is supported.  One of the better ways to do this is by adding the relevant classes via JavaScript, but leaving the control of these classes in the HTML.  Let me explain…</p>

<h3>The No-JavaScript-Scenario</h3>
<p>
  In the case JavaScript is not supported by the client / browser, then your page should still be functional and still make visual sense.<br>
  So, you should:
</p>
<ol>
  <li>Use semantic markup. Your page should still make sense without CSS.</li>
  <li>Your CSS should have a baseline style that makes sense for the page without JS support.</li>
  <li>Add the necessary styling to JS-driven widgets via extra classes</li>
</ol>
<p>With the baseline styles taken care of, we need to move onto adding the relevant behaviours and styling to improve the user’s interaction with your page.</p>
<h3>Initial state: adding the default classes</h3>
<p>When the document is loading, you’ll want to set classes to cover the initial state of the element. If JS is enabled, we’ll want our loaded HTML to look like this:</p>

<% code('html') do %>
<div class="container collapsible collapsed">
  <h3>More info</h3>
  <p>Once you’ve submitted the form…</p>
</div>
<% end %>

<p>In this example, I want the <code>&lt;div class="container"&gt;</code> to have two extra classes, <code>collapsible</code> and <code>collapsed</code>:<br>
<code>collapsible</code> is used for event handling and some styling.<br>
<code>collapsed</code> is used for the open or closed state of the collapsible element (assumes an element is open is by default).</p>
<p>To add these two classes, we could write our script in several ways:</p>
<ul>
  <li>The JS would store and add the classes we want.</li>
  <li>The HTML could store the classes with a prefix or array, the JS could then translate these classes into our CSS classes</li>
  <li>Or we could use the HTML to store the classes somewhere else, and then use JS to read from those</li>
</ul>
<p>This is a perfect scenario to use the HTML5 <code>data-</code> attributes. e.g.</p>

<% code('html') do %>
<div class="container" data-add-class="collapsible collapsed">
  <h3>More info</h3>
  <p>Once you’ve submitted the form…</p>
</div>
<% end %>

<p>From our script point of view, all we’d have to do is scour the document for a predefined data attribute and copy the values of this attribute into the class attribute, like so in jQuery:</p>

<% code('javascript') do %>
$(document).ready(function(){
  // When the DOM is ready, scour the elements in the DOM for the existence of a 'data-add-class' attribute
  $('[data-add-class]').each(function(){
    var class_to_add = $(this).attr('data-add-class');
    // Then take the value from this attribute and add it into the class list.
    $(this).addClass(class_to_add);
  });
});
<% end %>

<p>Now that the extra classes are being added we can add whatever styling we see fit.</p>

<h3>Why use data-attributes?</h3>
<p>“Wait, why not use JS to store and set these classes?” I hear you ask.<br>Often the server will want to set the initial state of the element, so instead of using script blocks and IDs to set initial state-classes, the server can set the state-classes via the data-attribute. e.g.:</p>

<% code('erb') do %>
<div class="container" data-add-class="collapsible <%% if someBoolean %>collapsed<%% end %>">
<% end %>

<h3>A working example</h3>
<p>Accordions are a perfect example of this approach. Accordions need to display all their information if JS is not available, and we only want the toggling behaviour to be added later. <a href="http://codepen.io/ndorfin/pen/gsABf">See my example on codepen.io</a>.</p>

<h3>Wrapping up</h3>
<p>This is a great platform for further interaction enrichment. We’re leaving the styling up to the CSS, content and basic content styling in the hands of the HTML and then enriching the whole experience with JavaScript (if the browser supports it).  We could make some further enhancements in the CSS such as by adding hardware-accelerated animations using <code>transitions</code>.</p>
<p>I hope this article was helpful. Are you writing progressive HTML, CSS and JS? If so, share your examples!</p>
